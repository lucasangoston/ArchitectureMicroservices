/*
 * Travel Contract
 * The Travel Contract Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BusinessDistributor;
import org.openapitools.client.model.BusinessSubscriber;
import org.openapitools.client.model.DeferredBilling;
import org.threeten.bp.LocalDate;

/**
 * Describes contract
 */
@ApiModel(description = "Describes contract")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-16T16:19:57.320415+02:00[Europe/Paris]")
public class ContractRequest {
  /**
   * External reference of the product
   */
  @JsonAdapter(ProductRefEnum.Adapter.class)
  public enum ProductRefEnum {
    DEFERRED_BILLING("DEFERRED_BILLING");

    private String value;

    ProductRefEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductRefEnum fromValue(String value) {
      for (ProductRefEnum b : ProductRefEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductRefEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductRefEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductRefEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductRefEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_REF = "productRef";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REF)
  private ProductRefEnum productRef;

  /**
   * Type of contract
   */
  @JsonAdapter(ContractTypeEnum.Adapter.class)
  public enum ContractTypeEnum {
    DEFERRED_BILLING("DEFERRED_BILLING");

    private String value;

    ContractTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContractTypeEnum fromValue(String value) {
      for (ContractTypeEnum b : ContractTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContractTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContractTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContractTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContractTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private ContractTypeEnum contractType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_SIGNED_AT = "signedAt";
  @SerializedName(SERIALIZED_NAME_SIGNED_AT)
  private LocalDate signedAt;

  public static final String SERIALIZED_NAME_ACTIVATED_AT = "activatedAt";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_AT)
  private LocalDate activatedAt;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private LocalDate expireAt;

  /**
   * Status of contact
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDED("SUSPENDED"),
    
    EXPIRED("EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_DISTRIBUTOR = "distributor";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTOR)
  private BusinessDistributor distributor;

  public static final String SERIALIZED_NAME_SUBSCRIBER = "subscriber";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER)
  private BusinessSubscriber subscriber;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private DeferredBilling custom;


  public ContractRequest productRef(ProductRefEnum productRef) {
    
    this.productRef = productRef;
    return this;
  }

   /**
   * External reference of the product
   * @return productRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DEFERRED_BILLING", value = "External reference of the product")

  public ProductRefEnum getProductRef() {
    return productRef;
  }


  public void setProductRef(ProductRefEnum productRef) {
    this.productRef = productRef;
  }


  public ContractRequest contractType(ContractTypeEnum contractType) {
    
    this.contractType = contractType;
    return this;
  }

   /**
   * Type of contract
   * @return contractType
  **/
  @ApiModelProperty(example = "DEFERRED_BILLING", required = true, value = "Type of contract")

  public ContractTypeEnum getContractType() {
    return contractType;
  }


  public void setContractType(ContractTypeEnum contractType) {
    this.contractType = contractType;
  }


  public ContractRequest createdAt(LocalDate createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return createdAt
  **/
  @ApiModelProperty(example = "Fri Apr 22 02:00:00 CEST 2022", required = true, value = "Creation date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public ContractRequest signedAt(LocalDate signedAt) {
    
    this.signedAt = signedAt;
    return this;
  }

   /**
   * Signed date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return signedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Apr 22 02:00:00 CEST 2022", value = "Signed date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getSignedAt() {
    return signedAt;
  }


  public void setSignedAt(LocalDate signedAt) {
    this.signedAt = signedAt;
  }


  public ContractRequest activatedAt(LocalDate activatedAt) {
    
    this.activatedAt = activatedAt;
    return this;
  }

   /**
   * Activation date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return activatedAt
  **/
  @ApiModelProperty(example = "Sun Apr 24 02:00:00 CEST 2022", required = true, value = "Activation date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getActivatedAt() {
    return activatedAt;
  }


  public void setActivatedAt(LocalDate activatedAt) {
    this.activatedAt = activatedAt;
  }


  public ContractRequest expireAt(LocalDate expireAt) {
    
    this.expireAt = expireAt;
    return this;
  }

   /**
   * Expiration date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return expireAt
  **/
  @ApiModelProperty(example = "Sat Apr 01 02:00:00 CEST 2023", required = true, value = "Expiration date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getExpireAt() {
    return expireAt;
  }


  public void setExpireAt(LocalDate expireAt) {
    this.expireAt = expireAt;
  }


  public ContractRequest status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of contact
   * @return status
  **/
  @ApiModelProperty(example = "ACTIVE", required = true, value = "Status of contact")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ContractRequest distributor(BusinessDistributor distributor) {
    
    this.distributor = distributor;
    return this;
  }

   /**
   * Get distributor
   * @return distributor
  **/
  @ApiModelProperty(required = true, value = "")

  public BusinessDistributor getDistributor() {
    return distributor;
  }


  public void setDistributor(BusinessDistributor distributor) {
    this.distributor = distributor;
  }


  public ContractRequest subscriber(BusinessSubscriber subscriber) {
    
    this.subscriber = subscriber;
    return this;
  }

   /**
   * Get subscriber
   * @return subscriber
  **/
  @ApiModelProperty(required = true, value = "")

  public BusinessSubscriber getSubscriber() {
    return subscriber;
  }


  public void setSubscriber(BusinessSubscriber subscriber) {
    this.subscriber = subscriber;
  }


  public ContractRequest custom(DeferredBilling custom) {
    
    this.custom = custom;
    return this;
  }

   /**
   * Get custom
   * @return custom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeferredBilling getCustom() {
    return custom;
  }


  public void setCustom(DeferredBilling custom) {
    this.custom = custom;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractRequest contractRequest = (ContractRequest) o;
    return Objects.equals(this.productRef, contractRequest.productRef) &&
        Objects.equals(this.contractType, contractRequest.contractType) &&
        Objects.equals(this.createdAt, contractRequest.createdAt) &&
        Objects.equals(this.signedAt, contractRequest.signedAt) &&
        Objects.equals(this.activatedAt, contractRequest.activatedAt) &&
        Objects.equals(this.expireAt, contractRequest.expireAt) &&
        Objects.equals(this.status, contractRequest.status) &&
        Objects.equals(this.distributor, contractRequest.distributor) &&
        Objects.equals(this.subscriber, contractRequest.subscriber) &&
        Objects.equals(this.custom, contractRequest.custom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productRef, contractType, createdAt, signedAt, activatedAt, expireAt, status, distributor, subscriber, custom);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractRequest {\n");
    sb.append("    productRef: ").append(toIndentedString(productRef)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    signedAt: ").append(toIndentedString(signedAt)).append("\n");
    sb.append("    activatedAt: ").append(toIndentedString(activatedAt)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    distributor: ").append(toIndentedString(distributor)).append("\n");
    sb.append("    subscriber: ").append(toIndentedString(subscriber)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

