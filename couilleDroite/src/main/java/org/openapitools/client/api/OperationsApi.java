/*
 * Travel Billing
 * The Travel Invoicing Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.OperationRequest;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.SubscriptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient localVarApiClient;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for operationsGet
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsGetCall(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (invoiceRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceRef", invoiceRef));
        }

        if (customerRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerRef", customerRef));
        }

        if (contactRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactRef", contactRef));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsGetValidateBeforeCall(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = operationsGetCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 operationsGet(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = operationsGetWithHttpInfo(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> operationsGetWithHttpInfo(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = operationsGetValidateBeforeCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsGetAsync(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsGetValidateBeforeCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsPost
     * @param operationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Operation successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsPostCall(OperationRequest operationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = operationRequest;

        // create path and map variables
        String localVarPath = "/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsPostValidateBeforeCall(OperationRequest operationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = operationsPostCall(operationRequest, _callback);
        return localVarCall;

    }

    /**
     * Add Operations
     * Add a new Operation to deferred billing
     * @param operationRequest  (optional)
     * @return OperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Operation successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public OperationResponse operationsPost(OperationRequest operationRequest) throws ApiException {
        ApiResponse<OperationResponse> localVarResp = operationsPostWithHttpInfo(operationRequest);
        return localVarResp.getData();
    }

    /**
     * Add Operations
     * Add a new Operation to deferred billing
     * @param operationRequest  (optional)
     * @return ApiResponse&lt;OperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Operation successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResponse> operationsPostWithHttpInfo(OperationRequest operationRequest) throws ApiException {
        okhttp3.Call localVarCall = operationsPostValidateBeforeCall(operationRequest, null);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Operations (asynchronously)
     * Add a new Operation to deferred billing
     * @param operationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Operation successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsPostAsync(OperationRequest operationRequest, final ApiCallback<OperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsPostValidateBeforeCall(operationRequest, _callback);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchOperation
     * @param orderRef Order extrenal Reference (optional)
     * @param operationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR - Invalid object request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchOperationCall(String orderRef, OperationRequest operationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = operationRequest;

        // create path and map variables
        String localVarPath = "/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderRef", orderRef));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchOperationValidateBeforeCall(String orderRef, OperationRequest operationRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = patchOperationCall(orderRef, operationRequest, _callback);
        return localVarCall;

    }

    /**
     * Patch Operations
     * Update an existing operation (usecase cancelling)
     * @param orderRef Order extrenal Reference (optional)
     * @param operationRequest  (optional)
     * @return SubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR - Invalid object request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionResponse patchOperation(String orderRef, OperationRequest operationRequest) throws ApiException {
        ApiResponse<SubscriptionResponse> localVarResp = patchOperationWithHttpInfo(orderRef, operationRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Operations
     * Update an existing operation (usecase cancelling)
     * @param orderRef Order extrenal Reference (optional)
     * @param operationRequest  (optional)
     * @return ApiResponse&lt;SubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR - Invalid object request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionResponse> patchOperationWithHttpInfo(String orderRef, OperationRequest operationRequest) throws ApiException {
        okhttp3.Call localVarCall = patchOperationValidateBeforeCall(orderRef, operationRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Operations (asynchronously)
     * Update an existing operation (usecase cancelling)
     * @param orderRef Order extrenal Reference (optional)
     * @param operationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR - Invalid object request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchOperationAsync(String orderRef, OperationRequest operationRequest, final ApiCallback<SubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchOperationValidateBeforeCall(orderRef, operationRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
