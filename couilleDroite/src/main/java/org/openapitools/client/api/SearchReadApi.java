/*
 * Travel Contract
 * The Travel Contract Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContractResponse;
import org.openapitools.client.model.ContractsResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchReadApi {
    private ApiClient localVarApiClient;

    public SearchReadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchReadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getContract
     * @param contractRef External identifier of the contract (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractCall(String contractRef, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts/{contractRef}"
            .replaceAll("\\{" + "contractRef" + "\\}", localVarApiClient.escapeString(contractRef.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractValidateBeforeCall(String contractRef, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contractRef' is set
        if (contractRef == null) {
            throw new ApiException("Missing the required parameter 'contractRef' when calling getContract(Async)");
        }
        

        okhttp3.Call localVarCall = getContractCall(contractRef, _callback);
        return localVarCall;

    }

    /**
     * Read a Contract
     * Get an existing Contract
     * @param contractRef External identifier of the contract (required)
     * @return ContractResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ContractResponse getContract(String contractRef) throws ApiException {
        ApiResponse<ContractResponse> localVarResp = getContractWithHttpInfo(contractRef);
        return localVarResp.getData();
    }

    /**
     * Read a Contract
     * Get an existing Contract
     * @param contractRef External identifier of the contract (required)
     * @return ApiResponse&lt;ContractResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractResponse> getContractWithHttpInfo(String contractRef) throws ApiException {
        okhttp3.Call localVarCall = getContractValidateBeforeCall(contractRef, null);
        Type localVarReturnType = new TypeToken<ContractResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read a Contract (asynchronously)
     * Get an existing Contract
     * @param contractRef External identifier of the contract (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractAsync(String contractRef, final ApiCallback<ContractResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractValidateBeforeCall(contractRef, _callback);
        Type localVarReturnType = new TypeToken<ContractResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchContracts
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS - Returns a list of Contracts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchContractsCall(String subscriberRef, String contractStatus, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriberRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriberRef", subscriberRef));
        }

        if (contractStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractStatus", contractStatus));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchContractsValidateBeforeCall(String subscriberRef, String contractStatus, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchContractsCall(subscriberRef, contractStatus, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Search Contracts
     * Multi-criteria search for contracts. The result is a list (maybe empty) of contracts
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return ContractsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS - Returns a list of Contracts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ContractsResponse searchContracts(String subscriberRef, String contractStatus, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ContractsResponse> localVarResp = searchContractsWithHttpInfo(subscriberRef, contractStatus, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Search Contracts
     * Multi-criteria search for contracts. The result is a list (maybe empty) of contracts
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return ApiResponse&lt;ContractsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS - Returns a list of Contracts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractsResponse> searchContractsWithHttpInfo(String subscriberRef, String contractStatus, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchContractsValidateBeforeCall(subscriberRef, contractStatus, limit, offset, null);
        Type localVarReturnType = new TypeToken<ContractsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Contracts (asynchronously)
     * Multi-criteria search for contracts. The result is a list (maybe empty) of contracts
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS - Returns a list of Contracts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchContractsAsync(String subscriberRef, String contractStatus, Integer limit, Integer offset, final ApiCallback<ContractsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchContractsValidateBeforeCall(subscriberRef, contractStatus, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ContractsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
